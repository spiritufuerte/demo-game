{"version":3,"sources":["components/Tiles/Tiles.module.css","components/Tile/Tile.module.css","App.module.css","components/GameLevelButton/GameLevelButton.module.css","components/Tile/Tile.js","components/GameLevelButton/GameLevelButton.js","components/Tiles/Tiles.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tile","color","onColorChanged","isRemoved","clickedTiles","id","gamePaused","amount","isClicked","find","i","className","classes","wrapperRemoved","bigWrapperRemoved","style","backgroundColor","wrapper","bigWrapper","onClick","GameLevelButton","onGameLevelChanged","text","BUTTONS","countRemovedTiles","Tiles","useState","setClickedTiles","tiles","setTiles","setAmount","pause","setPause","handleGameLevelChanged","useEffect","length","console","log","newTiles","map","tile","setTimeout","handleTileColorChanged","obj","push","Math","random","toString","substr","arr","j","temp","floor","shuffle","generateObj","buttons","item","key","textEndGame","bigTiles","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2034385b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tiles\":\"Tiles_Tiles__25Jcy\",\"textEndGame\":\"Tiles_textEndGame__3sh9z\",\"wrapper\":\"Tiles_wrapper__s-R9q\",\"buttons\":\"Tiles_buttons__2HjqL\",\"bigTiles\":\"Tiles_bigTiles__EmNQm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Tile_wrapper__2z_kY\",\"bigWrapperRemoved\":\"Tile_bigWrapperRemoved__3SwSK\",\"wrapperRemoved\":\"Tile_wrapperRemoved__kSD7Y\",\"bigWrapper\":\"Tile_bigWrapper__3NuTi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3eon4\",\"tile\":\"App_tile__37QuJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GameLevelButton\":\"GameLevelButton_GameLevelButton__3BzjM\"};","import React from \"react\";\r\nimport classes from './Tile.module.css';\r\n\r\n\r\nconst Tile = ({color, onColorChanged, isRemoved, clickedTiles, id, gamePaused, amount}) => {\r\n    let defaultColor = 'gray';\r\n    const isClicked = clickedTiles.find(i => i.id === id);\r\n\r\n    const handleClick = () => {\r\n        if (gamePaused) {\r\n            return;\r\n        } else {\r\n            onColorChanged({id, color});\r\n        }\r\n    }\r\n\r\n    return (\r\n        isRemoved ? <div\r\n                className={amount === 16 ? classes.wrapperRemoved : classes.bigWrapperRemoved}\r\n                style={{backgroundColor: 'transparent'}}\r\n            >\r\n            </div>\r\n            : <div\r\n                className={amount === 16 ? classes.wrapper : classes.bigWrapper}\r\n                onClick={isClicked ? null : handleClick}\r\n                style={{backgroundColor: isClicked ? color : defaultColor}}\r\n            >\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Tile;","import React from \"react\";\r\nimport classes from '../GameLevelButton/GameLevelButton.module.css'\r\n\r\n\r\nconst GameLevelButton = ({onGameLevelChanged, text, id}) => {\r\n\r\n    const handleButtonClick = () => {\r\n        onGameLevelChanged(id);\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={classes.GameLevelButton}\r\n            onClick={handleButtonClick}\r\n        >{text}</button>\r\n    )\r\n}\r\n\r\nexport default GameLevelButton;","import React, {useEffect, useState} from \"react\";\r\nimport classes from './Tiles.module.css';\r\nimport Tile from '../Tile/Tile'\r\nimport GameLevelButton from \"../GameLevelButton/GameLevelButton\";\r\n\r\nconst BUTTONS = [\r\n    {id: 1, text: '4x4'},\r\n    {id: 2, text: '6x6'}\r\n];\r\nlet countRemovedTiles = 0;\r\n\r\nconst Tiles = () => {\r\n    const [clickedTiles, setClickedTiles] = useState([]);\r\n    const [tiles, setTiles] = useState([]);\r\n    const [amount, setAmount] = useState(16);\r\n    const [pause, setPause] = useState(false);\r\n\r\n    const handleGameLevelChanged = (id) => {\r\n        if (id === 1) {\r\n            setAmount(16);\r\n        } else {\r\n            setAmount(36);\r\n        }\r\n    }\r\n\r\n    const gamePaused = () => {\r\n        setPause(true);\r\n    }\r\n\r\n    const returnGame = () => {\r\n        setPause(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (clickedTiles.length === 2) {\r\n            gamePaused();\r\n            if (clickedTiles[0].color === clickedTiles[1].color) {\r\n                countRemovedTiles++;\r\n                console.log(countRemovedTiles);\r\n                const newTiles = tiles.map(tile => {\r\n                    if (!tile.isRemoved) tile.isRemoved = clickedTiles.find(i => i.id === tile.id);\r\n                    return tile;\r\n                });\r\n                setTimeout(() => setTiles(newTiles), 500);\r\n            }\r\n            returnGame();\r\n            setTimeout((() => {\r\n                setClickedTiles([]);\r\n            }), 500);\r\n        }\r\n    }, [tiles, clickedTiles]);\r\n\r\n    const handleTileColorChanged = (obj) => {\r\n        setClickedTiles([...clickedTiles, obj]);\r\n    }\r\n\r\n    const generateColor = () => {\r\n        return '#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const generateObj = () => {\r\n            const newTiles = [];\r\n            for (let i = 0; i < amount; i++) {\r\n                newTiles.push({\r\n                    color: i % 2 ? newTiles[i - 1].color : generateColor(),\r\n                    isRemoved: false,\r\n                    id: i\r\n                });\r\n            }\r\n            setTiles(shuffle(newTiles));\r\n        };\r\n        generateObj();\r\n    }, [amount]);\r\n\r\n    function shuffle(arr) {\r\n        let j, temp;\r\n        for (let i = arr.length - 1; i > 0; i--) {\r\n            j = Math.floor(Math.random() * (i + 1));\r\n            temp = arr[j];\r\n            arr[j] = arr[i];\r\n            arr[i] = temp;\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.buttons}>\r\n                {BUTTONS.map((item, i) => (\r\n                    <GameLevelButton\r\n                        {...item}\r\n                        key={i}\r\n                        text={item.text}\r\n                        onGameLevelChanged={handleGameLevelChanged}/>\r\n                ))}\r\n            </div>\r\n            {(countRemovedTiles === amount) ?\r\n                <div className={classes.textEndGame}>\r\n                    <h1>End of the game</h1>\r\n                </div> :\r\n                <div className={tiles.length === 16 ? classes.Tiles : classes.bigTiles}>\r\n                    {tiles.map((item) => (\r\n                        <Tile\r\n                            clickedTiles={clickedTiles}\r\n                            {...item}\r\n                            key={item.id}\r\n                            onColorChanged={handleTileColorChanged}\r\n                            gamePaused={pause}\r\n                            amount={amount}\r\n                        />\r\n                    ))}\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tiles;","import React from 'react';\nimport './App.module.css';\nimport Tiles from \"./components/Tiles/Tiles\";\nimport classes from '../src/App.module.css'\n\nfunction App() {\n    return (\n        <div className={classes.App}>\n            <h1 className={classes.tile}>My game</h1>\n            <Tiles/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}